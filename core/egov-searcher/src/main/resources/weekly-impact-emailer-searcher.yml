SearchDefinitions:
 moduleName: Cron Jobs
 summary: Weekly impact emailer cron
 version: 1.0.0
 definitions:
 - name: stateWideData
   query: 
    baseQuery: select array_to_json(array_agg(row_to_json(stateWideReports))) from ((SELECT (SELECT count(*) FROM ((SELECT DISTINCT tenantid FROM eg_pt_property_v2 WHERE (createdtime/1000) < (extract(epoch from NOW()))) UNION (SELECT DISTINCT tenantid FROM eg_tl_tradelicense WHERE (createdtime/1000) < (extract(epoch from NOW()))) UNION (SELECT DISTINCT tenantid FROM eg_pgr_service WHERE (createdtime/1000) < (extract(epoch from NOW())))) AS tenants) as ulbCovered,(SELECT TRUNC(SUM(ins.amount) / 10000000, 3) FROM eg_pt_property_v2 pt LEFT JOIN egcl_receiptheader rh ON pt.propertyid = SPLIT_PART(rh.consumercode, ':', 1) LEFT JOIN egcl_instrumentheader ins ON rh.transactionid = ins.transactionnumber WHERE (pt.createdtime/1000) < (extract(epoch from NOW()))) as revenueCollected,(SELECT (SELECT count(*) FROM eg_pt_property_v2 WHERE (createdtime/1000) < (extract(epoch from NOW()))) + (SELECT count(*) FROM eg_tl_tradelicense WHERE (createdtime/1000) < (extract(epoch from NOW())))) as servicesApplied, (SELECT count(*) FROM eg_user WHERE (createddate < NOW())) as noOfUsersRegistered, 'Week0' as day) UNION (SELECT (SELECT count(*) FROM ((SELECT DISTINCT tenantid FROM eg_pt_property_v2 WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs)) UNION (SELECT DISTINCT tenantid FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs)) UNION (SELECT DISTINCT tenantid FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs))) AS tenants) as ulbCovered,(SELECT TRUNC(SUM(ins.amount) / 10000000, 3) FROM eg_pt_property_v2 pt LEFT JOIN egcl_receiptheader rh ON pt.propertyid = SPLIT_PART(rh.consumercode, ':', 1) LEFT JOIN egcl_instrumentheader ins ON rh.transactionid = ins.transactionnumber WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs)) as revenueCollected,(SELECT (SELECT count(*) FROM eg_pt_property_v2 WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs)) + (SELECT count(*) FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs))) as servicesApplied, (SELECT count(*) FROM eg_user WHERE (createddate < NOW())) as noOfUsersRegistered, 'Week1' as day) UNION (SELECT (SELECT count(*) FROM ((SELECT DISTINCT tenantid FROM eg_pt_property_v2 WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2)) UNION (SELECT DISTINCT tenantid FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2)) UNION (SELECT DISTINCT tenantid FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2))) AS tenants) as ulbCovered,(SELECT TRUNC(SUM(ins.amount) / 10000000, 3) FROM eg_pt_property_v2 pt LEFT JOIN egcl_receiptheader rh ON pt.propertyid = SPLIT_PART(rh.consumercode, ':', 1) LEFT JOIN egcl_instrumentheader ins ON rh.transactionid = ins.transactionnumber WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2)) as revenueCollected,(SELECT (SELECT count(*) FROM eg_pt_property_v2 WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2)) + (SELECT count(*) FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2))) as servicesApplied, (SELECT count(*) FROM eg_user WHERE (createddate < NOW())) as noOfUsersRegistered, 'Week2' as day) UNION (SELECT (SELECT count(*) FROM ((SELECT DISTINCT tenantid FROM eg_pt_property_v2 WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3)) UNION (SELECT DISTINCT tenantid FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3)) UNION (SELECT DISTINCT tenantid FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3))) AS tenants) as ulbCovered,(SELECT TRUNC(SUM(ins.amount) / 10000000, 3) FROM eg_pt_property_v2 pt LEFT JOIN egcl_receiptheader rh ON pt.propertyid = SPLIT_PART(rh.consumercode, ':', 1) LEFT JOIN egcl_instrumentheader ins ON rh.transactionid = ins.transactionnumber WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3)) as revenueCollected,(SELECT (SELECT count(*) FROM eg_pt_property_v2 WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3)) + (SELECT count(*) FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3))) as servicesApplied, (SELECT count(*) FROM eg_user WHERE (createddate < NOW())) as noOfUsersRegistered, 'Week3' as day) UNION (SELECT (SELECT count(*) FROM ((SELECT DISTINCT tenantid FROM eg_pt_property_v2 WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4)) UNION (SELECT DISTINCT tenantid FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4)) UNION (SELECT DISTINCT tenantid FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4))) AS tenants) as ulbCovered,(SELECT TRUNC(SUM(ins.amount) / 10000000, 3) FROM eg_pt_property_v2 pt LEFT JOIN egcl_receiptheader rh ON pt.propertyid = SPLIT_PART(rh.consumercode, ':', 1) LEFT JOIN egcl_instrumentheader ins ON rh.transactionid = ins.transactionnumber WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4)) as revenueCollected, (SELECT (SELECT count(*) FROM eg_pt_property_v2 WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4)) + (SELECT count(*) FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4))) as servicesApplied, (SELECT count(*) FROM eg_user WHERE (createddate < NOW())) as noOfUsersRegistered, 'Week4' as day) UNION (SELECT (SELECT count(*) FROM ((SELECT DISTINCT tenantid FROM eg_pt_property_v2 WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5)) UNION (SELECT DISTINCT tenantid FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5)) UNION (SELECT DISTINCT tenantid FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs))) AS tenants) as ulbCovered, (SELECT TRUNC(SUM(ins.amount) / 10000000, 3) FROM eg_pt_property_v2 pt LEFT JOIN egcl_receiptheader rh ON pt.propertyid = SPLIT_PART(rh.consumercode, ':', 1) LEFT JOIN egcl_instrumentheader ins ON rh.transactionid = ins.transactionnumber WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5)) as revenueCollected, (SELECT (SELECT count(*) FROM eg_pt_property_v2 WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5)) + (SELECT count(*) FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5))) as servicesApplied, (SELECT count(*) FROM eg_user WHERE (createddate < NOW())) as noOfUsersRegistered, 'Week5' as day)) stateWideReports
   searchParams:
    condition: AND
    params:
    - name: intervalinsecs
      isMandatory: true
      jsonPath: $.searchCriteria.intervalinsecs

   output:
    jsonFormat: {"ResponseInfo": {}}
    outJsonPath: $.data
    responseInfoPath: $.ResponseInfo
    
    
    
 - name: pgrData
   query: 
    baseQuery: select array_to_json(array_agg(row_to_json(pgrReports))) from ((SELECT count(DISTINCT tenantid) as ulbCovered, count(*) as totalComplaints, (SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract (epoch from NOW())))) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE status = 'closed' OR status = 'resolved' AND (createdtime/1000) < ((extract (epoch from NOW()))) ) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract (epoch from NOW()))))), '%') ELSE '0%' END) as redressal), 'Week0' as day FROM eg_pgr_service WHERE (createdtime/1000) < ((extract (epoch from NOW())))) UNION(SELECT count(DISTINCT tenantid) as ulbCovered, count(*) as totalComplaints, (SELECT (CASE WHEN (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs)) != 0 THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE status = 'closed' OR status = 'resolved' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs))), '%') ELSE '0%' END) as redressal), 'Week1' as day FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs)) UNION (SELECT count(DISTINCT tenantid) as ulbCovered, count(*) as totalComplaints, (SELECT (CASE WHEN (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2)) != 0 THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE status = 'closed' OR status = 'resolved' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2))), '%') ELSE '0%' END) as redressal), 'Week2' as day FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2)) UNION (SELECT count(DISTINCT tenantid) as ulbCovered, count(*) as totalComplaints, (SELECT (CASE WHEN (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3)) != 0 THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE status = 'closed' OR status = 'resolved' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3))), '%') ELSE '0%' END) as redressal), 'Week3' as day FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3)) UNION (SELECT count(DISTINCT tenantid) as ulbCovered, count(*) as totalComplaints, (SELECT (CASE WHEN (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4)) != 0 THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE status = 'closed' OR status = 'resolved' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4))), '%') ELSE '0%' END) as redressal), 'Week4' as day FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4)) UNION (SELECT count(DISTINCT tenantid) as ulbCovered, count(*) as totalComplaints, (SELECT (CASE WHEN (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5)) != 0 THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE status = 'closed' OR status = 'resolved' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5))), '%') ELSE '0%' END) as redressal), 'Week5' as day FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5))) pgrReports
   searchParams:
    condition: AND
    params:
    - name: intervalinsecs
      isMandatory: true
      jsonPath: $.searchCriteria.intervalinsecs

   output:
    jsonFormat: {"ResponseInfo": {}}
    outJsonPath: $.data
    responseInfoPath: $.ResponseInfo
    
    
    
 - name: pgrChannelData
   query: 
    baseQuery: select array_to_json(array_agg(row_to_json(pgrChannel))) from ((SELECT (SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract (epoch from NOW())))) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'ivr' AND (createdtime/1000) < ((extract (epoch from NOW()))) ) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract (epoch from NOW())) * 1000))), '%') ELSE '0%' END) as ivr),(SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract (epoch from NOW())))) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'web' AND (createdtime/1000) < ((extract (epoch from NOW()))) ) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract (epoch from NOW()))))), '%') ELSE '0%' END) as webapp),(SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract (epoch from NOW())))) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'mobileapp' AND (createdtime/1000) < ((extract (epoch from NOW()))) ) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract (epoch from NOW()))))), '%') ELSE '0%' END) as mobileapp), 'Week0' as day FROM eg_pgr_service WHERE (createdtime/1000) < (((extract (epoch from NOW())))) LIMIT 1) UNION (SELECT (SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'ivr' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs))), '%') ELSE '0%' END) as redressal), (SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'web' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs))), '%') ELSE '0%' END) as redressal),(SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'mobileapp' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs))), '%') ELSE '0%' END) as redressal), 'Week1' as day FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs) LIMIT 1) UNION (SELECT (SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'ivr' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2))), '%') ELSE '0%' END) as redressal), (SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'web' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2))), '%') ELSE '0%' END) as redressal), (SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'mobileapp' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2))), '%') ELSE '0%' END) as redressal), 'Week2' as day FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2) LIMIT 1) UNION (SELECT (SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'ivr' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3))), '%') ELSE '0%' END) as redressal), (SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'web' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3))), '%') ELSE '0%' END) as redressal), (SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'mobileapp' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3))), '%') ELSE '0%' END) as redressal), 'Week3' as day FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3) LIMIT 1) UNION (SELECT (SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'ivr' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4))), '%') ELSE '0%' END) as redressal), (SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'web' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4))), '%') ELSE '0%' END) as redressal),(SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'mobileapp' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4))), '%') ELSE '0%' END) as redressal), 'Week4' as day FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4) LIMIT 1) UNION (SELECT (SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'ivr' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5))), '%') ELSE '0%' END) as redressal), (SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'web' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5))), '%') ELSE '0%' END) as redressal),(SELECT (CASE WHEN ((SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5)) != 0) THEN CONCAT(((SELECT count(*) FROM eg_pgr_service WHERE source = 'mobileapp' AND (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5)) * 100 / (SELECT count(*) FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5))), '%') ELSE '0%' END) as redressal), 'Week5' as day FROM eg_pgr_service WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5) LIMIT 1)) pgrChannel
   searchParams:
    condition: AND
    params:
    - name: intervalinsecs
      isMandatory: true
      jsonPath: $.searchCriteria.intervalinsecs

   output:
    jsonFormat: {"ResponseInfo": {}}
    outJsonPath: $.data
    responseInfoPath: $.ResponseInfo
    
    
    
 - name: ptData
   query: 
    baseQuery: select array_to_json(array_agg(row_to_json(ptReports))) from ((SELECT count(DISTINCT pt.tenantid) as ulbcovered, TRUNC(SUM(ins.amount) / 10000000, 3) as revenuecollected, CONCAT((count(DISTINCT pt.propertyid) / 1000), '.', MOD(count(DISTINCT pt.propertyid), 1000)) as noofpropertiescreated, 'Week0' as day FROM eg_pt_property_v2 pt LEFT JOIN egcl_receiptheader rh ON pt.propertyid = SPLIT_PART(rh.consumercode, ':', 1) LEFT JOIN egcl_instrumentheader ins ON rh.transactionid = ins.transactionnumber WHERE (pt.createdtime/1000) < (extract(epoch from NOW()))) UNION (SELECT count(DISTINCT pt.tenantid) as ulbcovered, TRUNC(SUM(ins.amount) / 10000000, 3) as revenuecollected, CONCAT((count(DISTINCT pt.propertyid) / 1000), '.', MOD(count(DISTINCT pt.propertyid), 1000)) as noofpropertiescreated, 'Week1' as day FROM eg_pt_property_v2 pt LEFT JOIN egcl_receiptheader rh ON pt.propertyid = SPLIT_PART(rh.consumercode, ':', 1) LEFT JOIN egcl_instrumentheader ins ON rh.transactionid = ins.transactionnumber WHERE (pt.createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs)) UNION (SELECT count(DISTINCT pt.tenantid) as ulbcovered, TRUNC(SUM(ins.amount) / 10000000, 3) as revenuecollected, CONCAT((count(DISTINCT pt.propertyid) / 1000), '.', MOD(count(DISTINCT pt.propertyid), 1000)) as noofpropertiescreated, 'Week2' as day FROM eg_pt_property_v2 pt LEFT JOIN egcl_receiptheader rh ON pt.propertyid = SPLIT_PART(rh.consumercode, ':', 1) LEFT JOIN egcl_instrumentheader ins ON rh.transactionid = ins.transactionnumber WHERE (pt.createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2)) UNION (SELECT count(DISTINCT pt.tenantid) as ulbcovered, TRUNC(SUM(ins.amount) / 10000000, 3) as revenuecollected, CONCAT((count(DISTINCT pt.propertyid) / 1000), '.', MOD(count(DISTINCT pt.propertyid), 1000)) as noofpropertiescreated, 'Week3' as day FROM eg_pt_property_v2 pt LEFT JOIN egcl_receiptheader rh ON pt.propertyid = SPLIT_PART(rh.consumercode, ':', 1) LEFT JOIN egcl_instrumentheader ins ON rh.transactionid = ins.transactionnumber WHERE (pt.createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3)) UNION (SELECT count(DISTINCT pt.tenantid) as ulbcovered, TRUNC(SUM(ins.amount) / 10000000, 3) as revenuecollected, CONCAT((count(DISTINCT pt.propertyid) / 1000), '.', MOD(count(DISTINCT pt.propertyid), 1000)) as noofpropertiescreated, 'Week4' as day FROM eg_pt_property_v2 pt LEFT JOIN egcl_receiptheader rh ON pt.propertyid = SPLIT_PART(rh.consumercode, ':', 1) LEFT JOIN egcl_instrumentheader ins ON rh.transactionid = ins.transactionnumber WHERE (pt.createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4)) UNION (SELECT count(DISTINCT pt.tenantid) as ulbcovered, TRUNC(SUM(ins.amount) / 10000000, 3) as revenuecollected, CONCAT((count(DISTINCT pt.propertyid) / 1000), '.', MOD(count(DISTINCT pt.propertyid), 1000)) as noofpropertiescreated, 'Week5' as day FROM eg_pt_property_v2 pt LEFT JOIN egcl_receiptheader rh ON pt.propertyid = SPLIT_PART(rh.consumercode, ':', 1) LEFT JOIN egcl_instrumentheader ins ON rh.transactionid = ins.transactionnumber WHERE (pt.createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5))) ptReports
   searchParams:
    condition: AND
    params:
    - name: intervalinsecs
      isMandatory: true
      jsonPath: $.searchCriteria.intervalinsecs

   output:
    jsonFormat: {"ResponseInfo": {}}
    outJsonPath: $.data
    responseInfoPath: $.ResponseInfo
    
    
    
 - name: tlData
   query: 
    baseQuery: select array_to_json(array_agg(row_to_json(tlReports))) from (SELECT count(DISTINCT tenantid) as ulbCovered, count(*) as licenseIssued, 'Week0' as day FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract (epoch from NOW()))) UNION SELECT count(DISTINCT tenantid) as ulbCovered, count(*) as licenseIssued, 'Week1' as day FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs) UNION SELECT count(DISTINCT tenantid) as ulbCovered, count(*) as licenseIssued, 'Week2' as day FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 2) UNION SELECT count(DISTINCT tenantid) as ulbCovered, count(*) as licenseIssued, 'Week3' as day FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 3) UNION SELECT count(DISTINCT tenantid) as ulbCovered, count(*) as licenseIssued, 'Week4' as day FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 4) UNION SELECT count(DISTINCT tenantid) as ulbCovered, count(*) as licenseIssued, 'Week5' as day FROM eg_tl_tradelicense WHERE (createdtime/1000) < ((extract(epoch from NOW())) - :intervalinsecs * 5)) tlReports
   searchParams:
    condition: AND
    params:
    - name: intervalinsecs
      isMandatory: true
      jsonPath: $.searchCriteria.intervalinsecs

   output:
    jsonFormat: {"ResponseInfo": {}}
    outJsonPath: $.data
    responseInfoPath: $.ResponseInfo
    
 